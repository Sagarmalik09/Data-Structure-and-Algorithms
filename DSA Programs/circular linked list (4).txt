#include <stdio.h>
#include <stdlib.h>
typedef struct doublelinkedlist
{
    int info;
    struct circularlinkedlist*prev;
    struct circularlinkedlist *next;
}linked;
linked *newnode=NULL,*last=NULL,*temp=NULL,*head=NULL,*prev=NULL;
int main()
{
    int num,choice;
    while(1)
    {
        printf("\n1. Insert at end");
        printf("\n2. Traverse");
        printf("\n3. Insert at begin");
        printf("\n4. Delete at end");
        printf("\n5. Delete at begin");
        printf("\n6. Exit");                          //insertion and deletion at a position,searching ,sorting left
        printf("\n Enter the choice");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            newnode=(linked*)malloc(sizeof(linked));
            if(newnode==NULL)
            {
                printf("Not enough memory");
                exit(1);
            }
            printf("\n Enter a number");
            scanf("%d",&num);
            newnode->info=num;
            if(head==NULL)
            {
                newnode->next=head;
                head=newnode;
                last=newnode;
            }
            else
            {
                
                last->next=newnode;
                last= newnode;
                last->next=head;
            }
            break;
            case 2:
            if(head==NULL)
            {
                printf("Empty linked list");
                exit(1);
            }
            printf("\n Elements are: ");
            temp=head;
            do
            {
                printf("\t %d",temp->info);
                temp=temp->next;
            }while(temp!=head);
            
            break;
            case 3:
            newnode=(linked*)malloc(sizeof(linked));
            if(newnode==NULL)
            {
                printf("Not enough memory");
                exit(1);
            }
            printf("\n Enter a number");
            scanf("%d",&num);
            newnode->info=num;
            temp=head;
            if(temp == NULL)  
            {  
                head = newnode;  
                newnode -> next = head;  
            } 
            else
            {
            while(temp->next != head) 
            {
                temp = temp->next;  
            }
                newnode->next = head;   
                temp -> next = newnode;   
                head = newnode;       
            
            }
            break;
            case 4:
             if(head==NULL)  
            {  
                printf("\nempty linked list");
                break;
            }
            temp=head;
             if (temp->next == head)  
            {  
                head = NULL; 
                printf("\ndeleted number:%d",temp->info);
                free(temp);  
            }  
            while(temp->next != head)  
            {  
                prev=temp;  
                temp =temp->next;  
            }  
            prev->next =temp->next;
            printf("\ndeleted number: %d",temp->info);  
            free(temp);  
            break;
            case 5:
            if(head == NULL)  
            {  
                printf("\nempty linked list");    
            }  
            temp=head;
            if(temp->next == head)  
            {  
                head = NULL;  
                printf("\ndeleted number:%d",temp->info); 
                free(temp); 
            }  
              
            else  
            {   
                while(temp->next!= head) 
                {
                temp=temp->next;  
                }
                temp->next = head->next; 
                printf("\ndeleted number:%d",head->info);
                free(head);  
                head =temp->next;
            }  
            break;
            case 6:
            exit(1);
            break;
        }
    }

    return 0;
}
