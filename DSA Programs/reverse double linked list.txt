#include <stdio.h>
#include <stdlib.h>
typedef struct doublelinkedlist
{
    int info;
    struct doublelinkedlist*prev;
    struct doublelinkedlist *next;
}linked;
linked *newnode=NULL,*last=NULL,*temp=NULL,*head=NULL,*back=NULL,*prev=NULL,*temp1=0,*temp2=0;
int main()
{
    int num,choice,pos,count=0,flag=0,swap=0,swapped=0;
    while(1)
    {
        printf("\n1. Insert at end");
        printf("\n2. Traverse forward");
        printf("\n3. Traverse backward");
        printf("\n4.. Exit");
        printf("\n Enter the choice");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            newnode=(linked*)malloc(sizeof(linked));
            if(newnode==NULL)
            {
                printf("Not enough memory");
                exit(1);
            }
            printf("\n Enter a number");
            scanf("%d",&num);
            newnode->info=num;
            newnode->next=NULL;
            if(head==NULL)
            {
                newnode->prev=NULL;
                head=newnode;
                last=newnode;
            }
            else
            {
                newnode->prev=last;
                last->next=newnode;
                last= newnode;
            }
            break;
            case 2:
            if(head==NULL)
            {
                printf("Empty linked list");
                exit(1);
            }
            printf("\n Data from 1 to n.. forward mode..");
            temp=head;
            while(temp!=NULL)
            {
                printf("\t %d",temp->info);
                temp=temp->next;
            }
            break;
            case 3:
            if(head==NULL)
            {
                printf("Empty linked list");
                exit(1);
            }
            printf("\n Data from n to 1.. backward mode..");
            temp=last;
            while(temp!=NULL)
            {
                printf("\t %d",temp->info);
                temp=temp->prev;
            }
            break;
            case 4:
            exit(1);
        }
    }

    return 0;
}
