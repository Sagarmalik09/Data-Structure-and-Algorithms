#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define MAX 100
void insert(int[],int);
int partition(int[],int,int);  
void quickSort(int[],int,int); 
void display(int[],int);
int main()
{
    int size,choice;
    printf("\nEnter the number of elements...");
    scanf("%d",&size);
    int arr[size];
    printf("\nEnter %d elements...",size);       
    insert(arr,size);       //insert values in array
    while(1)
    {
        printf("\n1.Sort the elements..");
        printf("\n2.Display the elements..");
        printf("\n3.Exit..");
        printf("\nEnter your choice..");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
           quickSort(arr,0,size);      //sort the elements
            printf("\nSorting done successfully..");
            break; 
            case 2:     //display the elements
            printf("\nElements of array are...\n");
            display(arr,size);
            break;
            case 3:
            exit(1);
            default:
            printf("\nPlease enter a valid choice..");
            break;
        }
    }
    return 0;
}
void insert(int arr[],int size)
{
    int i;
    for(i=0;i<size;i++)
    {
        scanf("%d",&arr[i]);
    }
}

void display(int arr[],int size)
{
    int i;
    for(i=0;i<size;i++)
    printf("\t%d",arr[i]);
}

 
int partition(int arr[], int beg, int end)  
{  
      
    int left, right, temp, loc, flag;     
    loc = left = beg;  
    right = end;  
    flag = 0;  
    while(flag != 1)  
    {  
        while((arr[loc] <= arr[right]) && (loc!=right))  
        right--;  
        if(loc==right)  
        flag =1;  
        else if(arr[loc]>arr[right])  
        {  
            temp = arr[loc];  
            arr[loc] = arr[right];  
            arr[right] = temp;  
            loc = right;  
        }  
        if(flag!=1)  
        {  
            while((arr[loc] >= arr[left]) && (loc!=left))  
            left++;  
            if(loc==left)  
            flag =1;  
            else if(arr[loc] <arr[left])  
            {  
                temp = arr[loc];  
                arr[loc] = arr[left];  
                arr[left] = temp;  
                loc = left;  
            }  
        }  
    }  
    return loc;  
}  
void quickSort(int arr[], int beg, int end)  
{  
      
    int loc;  
    if(beg<end)  
    {  
        loc = partition(arr, beg, end);  
        quickSort(arr, beg, loc-1);  
        quickSort(arr, loc+1, end);  
    }  
} 